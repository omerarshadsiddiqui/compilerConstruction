
/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JDialog.java to edit this template
 */
package Compiler;

import java.io.BufferedOutputStream;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.IOException;
import java.util.Formatter;
import java.util.List;
import java.util.StringTokenizer;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author MMC
 */
public class CompilerGUI extends javax.swing.JDialog {

    /**
     * Creates new form compilerTextWindow
     */
    public CompilerGUI(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea2 = new javax.swing.JTextArea();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        jTextArea2.setColumns(20);
        jTextArea2.setRows(5);
        jScrollPane2.setViewportView(jTextArea2);

        jButton1.setText("Lexical");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Syntax");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(26, 26, 26))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(47, 47, 47)))
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 368, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane2))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(24, 24, 24)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 226, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(38, 38, 38)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 121, Short.MAX_VALUE)))
                .addGap(43, 43, 43))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed


        // TODO add your handling code here:

        try {
            // TODO add your handling code here:
            jTextArea2.setText("\t\tLEXICAL ANALYSIS");
            jTextArea2.append("\nLexeme\tToken Name\tAttribute Value");
            jTextArea2.append("\n---------------------------------------------\n");
            
//        for (String line : jTextArea1.getText().split("\\n")) lexicalAnalysis(line);
            lexicalAnalysis(jTextArea1.getText());
        } catch (IOException ex) {
            Logger.getLogger(CompilerGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed


        // TODO add your handling code here:

        try {
            
            jTextArea2.setText("Lexical Analysis & Syntax Analysis\n");
           syntaxAnalysis(jTextArea1.getText());
//            System.out.println(temp);
//            syntaxAnalysis(jTextArea1.getText());
        } catch (IOException ex) {
            Logger.getLogger(CompilerGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton2ActionPerformed

   
        public void syntaxAnalysis(String code) throws IOException {
        
        lexicalAnalysis(code);
        
        jTextArea2.append("\n-------------------------------------------\n");
        jTextArea2.append("\tSyntax Analysis\n");
        jTextArea2.append("\n-------------------------------------------\n");
//
        BufferedReader br = new BufferedReader(new FileReader("C:\\Users\\MMC\\Documents\\NetBeansProjects\\compilerConstruction\\src\\main\\java\\Compiler\\tempFiles\\data1.txt"));
        String st;
        while ((st = br.readLine()) != null) {
            jTextArea2.append("\nString Provided: "+st);
        }
//        //  String str = String.valueOf(Parser);
        String str = Lexer.Parser.get(0);
        System.out.println("Lexer.Parser");
        System.out.println(Lexer.Parser);
        for (int i = 1; i < Lexer.Parser.size(); i++) {
            str += String.valueOf(Lexer.Parser.get(i));//Parser.get(i);
        }
//        System.out.println(str);
        String finalString = "";
//        // separate the string in tokens
        int index = 0;
        while (index < str.length()) {
            if (str.charAt(index) == '(' || str.charAt(index) == '*' || str.charAt(index) == '+' || str.charAt(index) == ')' || str.charAt(index) == ';')
                finalString += " " + str.charAt(index) + " ";
            else
                finalString += str.charAt(index);
            index++;
        }
//       // System.out.println("String Provided: " + finalString);
//       // System.out.println(finalString);
//        // tokenizing the input string
        Parser.string_token = new StringTokenizer(finalString + " $");
        Parser.StringAt = Parser.string_token.nextToken().intern();
        System.out.println("Parser.StringAt");
        System.out.println(Parser.StringAt);
        System.out.println("Parser.checkString");
        System.out.println(Parser.checkString);
        System.out.println((Parser.StringAt.matches(Parser.checkString)));
        if (Parser.StringAt.matches(Parser.checkString)) {
            Parser.StringAt = "i";
        }
        Parser.StringInsertion();
//        System.out.println(Parser.Remaining);
        Parser.Parser();
        
    }
    
    
    public void lexicalAnalysis(String code) throws IOException{
        File file = new File("C:\\Users\\MMC\\Documents\\NetBeansProjects\\compilerConstruction\\src\\main\\java\\Compiler\\tempFiles\\data1.txt");
         
        try(FileOutputStream fos = new FileOutputStream(file); BufferedOutputStream bos = new BufferedOutputStream(fos)) {
            //write string to file
            byte[] bytes = code.getBytes();
            bos.write(bytes);
            bos.close();
            fos.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
        
        Lexer lexerClass = new Lexer(file);
        List<Tokens> tokenList = lexerClass.generateTokens();
        for (int i = 0; i < tokenList.size(); i++) {
            jTextArea2.append(tokenList.get(i).toString()+"\n");
        }
        
        
        jTextArea2.append("\n------------------------------------------\n");
        jTextArea2.append("\tSYMBOL TABLE\n");
        jTextArea2.append("--------------------------------------------\n");
        jTextArea2.append("\nAttribute Value\tToken Name\tValue\n");
        jTextArea2.append("\n---------------------------------------------\n");
        
        Formatter fmt = new Formatter();
        for (int i = 0; i < Lexer.Value.size(); i++) {
            fmt.format("%6s  %16s  %15s\n", Lexer.AttributeValue.get(i), Lexer.TokenName.get(i), Lexer.Value.get(i));
        }
        
        jTextArea2.append(fmt.toString());        
    }

    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CompilerGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CompilerGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CompilerGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CompilerGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                CompilerGUI dialog = new CompilerGUI(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }
    
   

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea jTextArea1;
    public static javax.swing.JTextArea jTextArea2;
    // End of variables declaration//GEN-END:variables
}
